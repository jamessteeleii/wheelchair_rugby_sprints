distance = factor(distance, levels = c("5m", "10m", "15m", "20m")))
preds <- models %>%
map_dbl(function(models) ggpredict(models,terms =  c("disability","sprint_number [1:10]")))
preds <- models %>%
map(function(models) ggpredict(models,terms =  c("disability","sprint_number [1:10]"))) %>%
bind_rows(.id = "distance") %>%
rename(disability = "x",
sprint_number = "group") %>%
mutate(sprint_number = as.numeric(sprint_number),
distance = factor(distance, levels = c("5m", "10m", "15m", "20m")))
get_preds <- functions(df) {
preds <- models %>%
map(get_preds) %>%
bind_rows(.id = "distance") %>%
rename(disability = "x",
sprint_number = "group") %>%
mutate(sprint_number = as.numeric(sprint_number),
distance = factor(distance, levels = c("5m", "10m", "15m", "20m")))
get_preds <- functions(df) {
ggpredict(df, terms =  c("disability","sprint_number [1:10]"))
get_preds <- functions(df) {
get_preds <- function(df) {
ggpredict(df, terms =  c("disability","sprint_number [1:10]"))
}
preds <- models %>%
map(get_preds) %>%
bind_rows(.id = "distance") %>%
rename(disability = "x",
sprint_number = "group") %>%
mutate(sprint_number = as.numeric(sprint_number),
distance = factor(distance, levels = c("5m", "10m", "15m", "20m")))
View(models)
preds <- models %>%
map(models,get_preds) %>%
bind_rows(.id = "distance") %>%
rename(disability = "x",
sprint_number = "group") %>%
mutate(sprint_number = as.numeric(sprint_number),
distance = factor(distance, levels = c("5m", "10m", "15m", "20m")))
preds <- models %>%
map(models,get_preds)
preds <- models %>%
map(get_preds(models)) %>%
bind_rows(.id = "distance") %>%
rename(disability = "x",
sprint_number = "group") %>%
mutate(sprint_number = as.numeric(sprint_number),
distance = factor(distance, levels = c("5m", "10m", "15m", "20m")))
preds <- models %>%
nest(
preds <- models %>%
nest()
preds <- models %>%
map(modelr::add_predictions(data, models))
map(function(models) ggpredict(models,terms =  c("disability","sprint_number [1:10]")))
preds <- models %>%
map(function(models) ggpredict(models,terms =  c("disability","sprint_number [1:10]"))) %>%
bind_rows(.id = "distance") %>%
rename(disability = "x",
sprint_number = "group") %>%
mutate(sprint_number = as.numeric(sprint_number),
distance = factor(distance, levels = c("5m", "10m", "15m", "20m")))
models <- data %>%
split(data$distance) %>%  # from base R
map(model = function(df) lmer(time ~ disability * sprint_number + (1 | id),
data = data,
REML = TRUE, control = lmerControl(optimizer="Nelder_Mead")))
models <- data %>%
split(data$distance) %>%  # from base R
mutate(model = map(function(df) lmer(time ~ disability * sprint_number + (1 | id),
data = data,
REML = TRUE, control = lmerControl(optimizer="Nelder_Mead")))
)
models$5m$Ptr
models$`5m`$Ptr
tblModel <- tibble(
split(data$distance) %>%  # from base R
) %>%
tblModel <- tibble(
data = split(data$distance) %>%  # from base R
) %>%
split(data$distance)
models <- data %>%
split(data$distance) %>%  # from base R
mutate(models = map(function(df) lmer(time ~ disability * sprint_number + (1 | id),
data = data,
REML = TRUE, control = lmerControl(optimizer="Nelder_Mead")))
)
nest() %>% # from base R
models <- data %>%
group_by(distance) %>%
nest() %>% # from base R
mutate(map(function(df) lmer(time ~ disability * sprint_number + (1 | id),
data = data,
REML = TRUE, control = lmerControl(optimizer="Nelder_Mead")))
)
models <- data %>%
group_by(distance) %>%
nest() %>% # from base R
mutate(model = map(function(df) lmer(time ~ disability * sprint_number + (1 | id),
data = data,
REML = TRUE, control = lmerControl(optimizer="Nelder_Mead")))
)
models <- data %>%
group_by(distance) %>%
nest()
View(models[[2]][[1]])
models$data
models <- data %>%
group_by(distance) %>%
nest() %>% # from base R
mutate(model = map(function(df) lmer(time ~ disability * sprint_number + (1 | id),
data = df,
REML = TRUE, control = lmerControl(optimizer="Nelder_Mead")))
)
nest_data <- data %>%
group_by(distance) %>%
nest()
lmer(time ~ disability * sprint_number + (1 | id),
data = df,
REML = TRUE, control = lmerControl(optimizer="Nelder_Mead"))
fit_model <- function(df) {
lmer(time ~ disability * sprint_number + (1 | id),
data = df,
REML = TRUE, control = lmerControl(optimizer="Nelder_Mead"))
}
models <- map(nest_data$data, fit_model)
preds <- models %>%
map(function(models) ggpredict(models,terms =  c("disability","sprint_number [1:10]"))) %>%
bind_rows(.id = "distance") %>%
rename(disability = "x",
sprint_number = "group") %>%
mutate(sprint_number = as.numeric(sprint_number),
distance = factor(distance, levels = c("5m", "10m", "15m", "20m")))
preds <- models %>%
map(function(models) ggpredict(models,terms =  c("disability","sprint_number [1:10]")))
View(models)
models <- map(nest_data$data, fit_model) %>%
mutate(distance = factor(distance, levels = c("5m", "10m", "15m", "20m")))
preds <- models %>%
map(function(models) ggpredict(models,terms =  c("disability","sprint_number [1:10]"))) %>%
as.tibble()
summaries <- models %>% map(summary)
preds <- models %>%
map(function(models) ggpredict(models,terms =  c("disability","sprint_number [1:10]"))) %>%
bind_rows(.id = "distance") %>%
rename(disability = "x",
sprint_number = "group") %>%
mutate(sprint_number = as.numeric(sprint_number),
distance = factor(distance, levels = c("5m", "10m", "15m", "20m")))
preds <- models %>%
map(function(models) ggpredict(models,terms =  c("disability","sprint_number [1:10]"))) %>%
bind_rows(.id = "distance") %>%
rename(disability = "x",
sprint_number = "group") %>%
mutate(sprint_number = as.numeric(sprint_number),
distance = rep(c("5m", "10m", "15m", "20m")),
distance = factor(distance, levels = c("5m", "10m", "15m", "20m")))
preds <- models %>%
map(function(models) ggpredict(models,terms =  c("disability","sprint_number [1:10]"))) %>%
bind_rows(.id = "distance") %>%
rename(disability = "x",
sprint_number = "group") %>%
mutate(sprint_number = as.numeric(sprint_number),
distance = rep(c("5m", "10m", "15m", "20m"), each = 20),
distance = factor(distance, levels = c("5m", "10m", "15m", "20m")))
preds %>%
ggplot(aes(x=sprint_number, fill=disability)) +
geom_ribbon(aes(ymin=conf.low, ymax=conf.high), alpha=0.25) +
geom_line(aes(y=predicted, color=disability), size=1) +
labs(x="Sprint Number",
y="Time (seconds)",
title = "Model Estimates",
subtitle = "Predicted values with 95% confidence intervals (ribbon)",
color = "Disability") +
guides(fill = "none") +
scale_x_continuous(breaks = c(1:10)) +
scale_y_continuous(breaks = c(2,3,4,5,6,7,8)) +
scale_color_manual(values = c("#E69F00", "#56B4E9")) +
facet_grid(.~distance) +
theme_classic() +
theme(legend.position = "bottom")
tar_make()
tar_make()
tar_visnetwork()
tar_make()
tar_visnetwork()
tar_make()
tar_visnetwork()
tar_visnetwork()
tar_make()
data %>%
ggplot(aes(x=sprint_number, color=disability)) +
geom_point(aes(y=time), size=0.5, alpha=0.25) +
geom_smooth(aes(y=time, group=id), size=0.25, alpha=0.25,
se=FALSE) +
labs(x="Sprint Number",
y="Time (seconds)",
title = "Individual Data and Smooths",
color = "Disability") +
guides(fill = "none",
color = "none") +
scale_x_continuous(breaks = c(1:10)) +
scale_y_continuous(breaks = c(2,3,4,5,6,7,8,9)) +
scale_color_manual(values = c("#E69F00", "#56B4E9")) +
facet_grid(.~distance) +
theme_classic()
preds %>%
ggplot(aes(x=sprint_number, fill=disability)) +
geom_ribbon(aes(ymin=conf.low, ymax=conf.high), alpha=0.25) +
geom_line(aes(y=predicted, color=disability), size=1) +
labs(x="Sprint Number",
y="Time (seconds)",
title = "Model Estimates",
subtitle = "Predicted values with 95% confidence intervals (ribbon)",
color = "Disability") +
guides(fill = "none") +
scale_x_continuous(breaks = c(1:10)) +
scale_y_continuous(breaks = c(2,3,4,5,6,7,8)) +
scale_color_manual(values = c("#E69F00", "#56B4E9")) +
facet_grid(.~distance) +
theme_classic() +
theme(legend.position = "bottom")
tar_make()
tar_load(disability_rsa_plot)
tar_visnetwork()
tar_visnetwork()
tar_make()
nest_data <- data %>%
group_by(distance) %>%
nest()
fit_model <- function(df) {
lmer(time ~ classif * sprint_number + (1 | id),
data = df,
REML = TRUE, control = lmerControl(optimizer="Nelder_Mead"))
}
models <- map(nest_data$data, fit_model)
summaries <- models %>% map(summary)
preds <- models %>%
map(function(models) ggpredict(models,terms =  c("disability","sprint_number [1:10]"))) %>%
bind_rows(.id = "distance") %>%
rename(disability = "x",
sprint_number = "group") %>%
mutate(sprint_number = as.numeric(sprint_number),
distance = rep(c("5m", "10m", "15m", "20m"), each = 20),
distance = factor(distance, levels = c("5m", "10m", "15m", "20m")))
preds <- models %>%
map(function(models) ggpredict(models,terms =  c("classif","sprint_number [1:10]"))) %>%
bind_rows(.id = "distance") %>%
rename(disability = "x",
sprint_number = "group") %>%
mutate(sprint_number = as.numeric(sprint_number),
distance = rep(c("5m", "10m", "15m", "20m"), each = 20),
distance = factor(distance, levels = c("5m", "10m", "15m", "20m")))
preds <- models %>%
map(function(models) ggpredict(models,terms =  c("classif","sprint_number [1:10]")))
preds <- models %>%
map(function(models) ggpredict(models,terms =  c("classif","sprint_number [1:10]"))) %>%
bind_rows(.id = "distance")
View(data)
tar_visnetwork()
data <- read.csv("rsa_data.csv", fileEncoding = 'UTF-8-BOM') %>%
mutate_if(is.character,as.factor) %>%
pivot_longer(c("x5_m", "x10_m", "x15_m", "x20_m"), names_to = "distance", values_to = "time") %>%
rename(disability = "sci")  %>%
mutate(distance = factor(str_remove_all(distance,"x|_"), levels = c("5m", "10m", "15m", "20m")),
classif = as.factor(classif))
nest_data <- data %>%
group_by(distance) %>%
nest()
fit_model <- function(df) {
lmer(time ~ classif * sprint_number + (1 | id),
data = df,
REML = TRUE, control = lmerControl(optimizer="Nelder_Mead"))
}
models <- map(nest_data$data, fit_model)
summaries <- models %>% map(summary)
data <- read.csv("rsa_data.csv", fileEncoding = 'UTF-8-BOM') %>%
mutate_if(is.character,as.factor) %>%
pivot_longer(c("x5_m", "x10_m", "x15_m", "x20_m"), names_to = "distance", values_to = "time") %>%
rename(disability = "sci")  %>%
mutate(distance = factor(str_remove_all(distance,"x|_"), levels = c("5m", "10m", "15m", "20m")),
classif = as.integer(classif))
nest_data <- data %>%
group_by(distance) %>%
nest()
fit_model <- function(df) {
lmer(time ~ classif * sprint_number + (1 | id),
data = df,
REML = TRUE, control = lmerControl(optimizer="Nelder_Mead"))
}
models <- map(nest_data$data, fit_model)
summaries <- models %>% map(summary)
preds <- models %>%
map(function(models) ggpredict(models,terms =  c("classif","sprint_number [1:10]"))) %>%
bind_rows(.id = "distance") %>%
rename(classif = "x",
sprint_number = "group") %>%
mutate(sprint_number = as.numeric(sprint_number),
distance = rep(c("5m", "10m", "15m", "20m"), each = 20),
distance = factor(distance, levels = c("5m", "10m", "15m", "20m")))
models %>%
map(function(models) ggpredict(models,terms =  c("classif","sprint_number [1:10]")))
View(data)
data <- read.csv("rsa_data.csv", fileEncoding = 'UTF-8-BOM') %>%
mutate_if(is.character,as.factor) %>%
pivot_longer(c("x5_m", "x10_m", "x15_m", "x20_m"), names_to = "distance", values_to = "time") %>%
rename(disability = "sci")  %>%
mutate(distance = factor(str_remove_all(distance,"x|_"), levels = c("5m", "10m", "15m", "20m")))
nest_data <- data %>%
group_by(distance) %>%
nest()
fit_model <- function(df) {
lmer(time ~ classif * sprint_number + (1 | id),
data = df,
REML = TRUE, control = lmerControl(optimizer="Nelder_Mead"))
}
models <- map(nest_data$data, fit_model)
summaries <- models %>% map(summary)
preds <- models %>%
map(function(models) ggpredict(models,terms =  c("classif","sprint_number [1:10]"))) %>%
bind_rows(.id = "distance") %>%
rename(classif = "x",
sprint_number = "group") %>%
mutate(sprint_number = as.numeric(sprint_number),
distance = rep(c("5m", "10m", "15m", "20m"), each = 20),
distance = factor(distance, levels = c("5m", "10m", "15m", "20m")))
data %>%
ggplot(aes(x=sprint_number, color=classif)) +
geom_point(aes(y=time), size=0.5, alpha=0.25) +
geom_smooth(aes(y=time, group=id), size=0.25, alpha=0.25,
se=FALSE, method = "lm") +
labs(x="Sprint Number",
y="Time (seconds)",
title = "Individual Data and Slopes",
color = "Classification") +
guides(fill = "none",
color = "none") +
scale_x_continuous(breaks = c(1:10)) +
scale_y_continuous(breaks = c(2,3,4,5,6,7,8,9)) +
scale_color_manual(values = c("#E69F00", "#56B4E9")) +
facet_grid(.~distance) +
theme_classic()
data <- read.csv("rsa_data.csv", fileEncoding = 'UTF-8-BOM') %>%
mutate_if(is.character,as.factor) %>%
pivot_longer(c("x5_m", "x10_m", "x15_m", "x20_m"), names_to = "distance", values_to = "time") %>%
rename(disability = "sci")  %>%
mutate(distance = factor(str_remove_all(distance,"x|_"), levels = c("5m", "10m", "15m", "20m")),
classif = as.integer(classif))
nest_data <- data %>%
group_by(distance) %>%
nest()
fit_model <- function(df) {
lmer(time ~ classif * sprint_number + (1 | id),
data = df,
REML = TRUE, control = lmerControl(optimizer="Nelder_Mead"))
}
models <- map(nest_data$data, fit_model)
summaries <- models %>% map(summary)
preds <- models %>%
map(function(models) ggpredict(models,terms =  c("classif","sprint_number [1:10]"))) %>%
bind_rows(.id = "distance") %>%
rename(classif = "x",
sprint_number = "group") %>%
mutate(sprint_number = as.numeric(sprint_number),
distance = rep(c("5m", "10m", "15m", "20m"), each = 20),
distance = factor(distance, levels = c("5m", "10m", "15m", "20m")))
data %>%
ggplot(aes(x=sprint_number, color=classif)) +
geom_point(aes(y=time), size=0.5, alpha=0.25) +
geom_smooth(aes(y=time, group=id), size=0.25, alpha=0.25,
se=FALSE, method = "lm") +
labs(x="Sprint Number",
y="Time (seconds)",
title = "Individual Data and Slopes",
color = "Classification") +
guides(fill = "none",
color = "none") +
scale_x_continuous(breaks = c(1:10)) +
scale_y_continuous(breaks = c(2,3,4,5,6,7,8,9)) +
scale_color_manual(values = c("#E69F00", "#56B4E9")) +
facet_grid(.~distance) +
theme_classic()
preds %>%
ggplot(aes(x=sprint_number, fill=classif)) +
geom_ribbon(aes(ymin=conf.low, ymax=conf.high), alpha=0.25) +
geom_line(aes(y=predicted, color=classif), size=1) +
labs(x="Sprint Number",
y="Time (seconds)",
title = "Model Estimates",
subtitle = "Predicted values with 95% confidence intervals (ribbon)",
color = "Classification") +
guides(fill = "none") +
scale_x_continuous(breaks = c(1:10)) +
scale_y_continuous(breaks = c(2,3,4,5,6,7,8)) +
scale_color_manual(values = c("#E69F00", "#56B4E9")) +
facet_grid(.~distance) +
theme_classic() +
theme(legend.position = "bottom")
data <- read.csv("rsa_data.csv", fileEncoding = 'UTF-8-BOM') %>%
mutate_if(is.character,as.factor) %>%
pivot_longer(c("x5_m", "x10_m", "x15_m", "x20_m"), names_to = "distance", values_to = "time") %>%
rename(disability = "sci")  %>%
mutate(distance = factor(str_remove_all(distance,"x|_"), levels = c("5m", "10m", "15m", "20m")),
classif = as.factor(classif))
nest_data <- data %>%
group_by(distance) %>%
nest()
fit_model <- function(df) {
lmer(time ~ classif * sprint_number + (1 | id),
data = df,
REML = TRUE, control = lmerControl(optimizer="Nelder_Mead"))
}
models <- map(nest_data$data, fit_model)
summaries <- models %>% map(summary)
preds <- models %>%
map(function(models) ggpredict(models,terms =  c("classif","sprint_number [1:10]"))) %>%
bind_rows(.id = "distance") %>%
rename(classif = "x",
sprint_number = "group") %>%
mutate(sprint_number = as.numeric(sprint_number),
distance = rep(c("5m", "10m", "15m", "20m"), each = 20),
distance = factor(distance, levels = c("5m", "10m", "15m", "20m")))
individual_data_plot <- data %>%
ggplot(aes(x=sprint_number, color=classif)) +
geom_point(aes(y=time), size=0.5, alpha=0.25) +
geom_smooth(aes(y=time, group=id), size=0.25, alpha=0.25,
se=FALSE, method = "lm") +
labs(x="Sprint Number",
y="Time (seconds)",
title = "Individual Data and Slopes",
color = "Classification") +
guides(fill = "none",
color = "none") +
scale_x_continuous(breaks = c(1:10)) +
scale_y_continuous(breaks = c(2,3,4,5,6,7,8,9)) +
scale_color_manual(values = c("#E69F00", "#56B4E9")) +
facet_grid(.~distance) +
theme_classic()
model_data_plot <- preds %>%
ggplot(aes(x=sprint_number, fill=classif)) +
geom_ribbon(aes(ymin=conf.low, ymax=conf.high), alpha=0.25) +
geom_line(aes(y=predicted, color=classif), size=1) +
labs(x="Sprint Number",
y="Time (seconds)",
title = "Model Estimates",
subtitle = "Predicted values with 95% confidence intervals (ribbon)",
color = "Classification") +
guides(fill = "none") +
scale_x_continuous(breaks = c(1:10)) +
scale_y_continuous(breaks = c(2,3,4,5,6,7,8)) +
scale_color_manual(values = c("#E69F00", "#56B4E9")) +
facet_grid(.~distance) +
theme_classic() +
theme(legend.position = "bottom")
individual_data_plot
individual_data_plot <- data %>%
ggplot(aes(x=sprint_number, color=classif)) +
geom_point(aes(y=time), size=0.5, alpha=0.25) +
geom_smooth(aes(y=time, group=id), size=0.25, alpha=0.25,
se=FALSE) +
labs(x="Sprint Number",
y="Time (seconds)",
title = "Individual Data and Slopes",
color = "Classification") +
guides(fill = "none",
color = "none") +
scale_x_continuous(breaks = c(1:10)) +
scale_y_continuous(breaks = c(2,3,4,5,6,7,8,9)) +
scale_color_manual(values = c("#E69F00", "#56B4E9")) +
facet_grid(.~distance) +
theme_classic()
individual_data_plot
preds %>%
ggplot(aes(x=sprint_number, fill=classif)) +
geom_ribbon(aes(ymin=conf.low, ymax=conf.high), alpha=0.25) +
geom_line(aes(y=predicted, color=classif), size=1) +
labs(x="Sprint Number",
y="Time (seconds)",
title = "Model Estimates",
subtitle = "Predicted values with 95% confidence intervals (ribbon)",
color = "Classification") +
guides(fill = "none") +
scale_x_continuous(breaks = c(1:10)) +
scale_y_continuous(breaks = c(2,3,4,5,6,7,8)) +
scale_color_manual(values = c("#E69F00", "#56B4E9")) +
facet_grid(.~distance) +
theme_classic() +
theme(legend.position = "bottom")
tar_visnetwork()
tar_make()
tar_make()
tar_visnetwork()
tar_make()
tar_visnetwork()
tar_make()
tar_make()
tar_make()
usethis::use_git()
usethis::use_git()
usethis::create_from_github(
"https://github.com/jamessteeleii/wheelchair_rubgy_sprints.git",
destdir = "C:/Users/james/Dropbox/Research/Dissy students/Chloe Maguire"
)
usethis::create_from_github(
"https://github.com/jamessteeleii/wheelchair_rugby_sprints.git",
destdir = "C:/Users/james/Dropbox/Research/Dissy students/Chloe Maguire"
)
usethis::create_from_github(
"https://github.com/jamessteeleii/wheelchair_rugby_sprints.git",
destdir = "C:/Users/james/Dropbox/Research/Dissy students/wheelchair_rugby_sprints"
)
